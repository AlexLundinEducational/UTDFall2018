10-23-2018
	Summary
		Translate problem into pure english
			then is it clear how to use sem_wait and sem_post
		Mutex
			mutual exclusion
			
	Semaphores
		initialize state with value
		from there one out, the state is hidden
		
		Operations
			sem_wait
				decrement counter
			sem_post
				increment counter
				
	Atomicity/ Mutual Exclusion Violation
		- variables are only modified when code is aware
		Caused by:
			data editing when program is not aware
		Fix:
			locks
	Order
		-thread 1 does some action that must be done before thread 2
		Caused by:
			action sequences between threads
		Fix:
			sem_wait on thread 2
			sem_post on thread 1
			
	Deadlock
		-every thread is waiting on other threads
		Caused by:
			1 mutual exclusion required
			2 holding and waiting
			3 no preemption (can't take resource from thread)
			4 circular wait (chain of threads hold and waiting)
		Fix:	
			break any 1 of the above conditions
			
	Preventing circular wait
		total ordering - cannot aquire any resource that is earlier in the order than
			any resource currently held
		proof by contradiction
			because we can not hold any resource, earlier than any resource in possesion there will be no loops
			
			price: 
				utilization of resources goes down
				concurrency goes down
	
	Prevent hold and wait
		aquire all locks at once
		
		meta lock for all locks
		
			price:
				need to know the locks that will be aquired in the future
				concurrency goes down
				
	Prevent no preemption
		tryLock - if cannot get lock needed, release locks held
		
			price:
				livelock
				cost of reaquiring all missing locks after release
				
			solution:
				exponential backoff, leaves locks unlocked
	
	Prevent Mutual Exclusion
		compareAndSwap
		only allow updates when the shared variable is the way you left it
			price:
				complexity of list insert, but there is no deadlock
				
			solution:
				there are some cases where this won't work
					like writing lots of data to a file, locks are needed
	
	Deadlock avoidance with scheduling
		requires global knowledge of thread locks