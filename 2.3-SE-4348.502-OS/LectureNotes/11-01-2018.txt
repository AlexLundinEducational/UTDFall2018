11-01-2018
	Summary
	Project p4b
		File size	
			12 blocks at 128 a block
			140 mb file size
			140 * 512 mb
		#define InodeLocation = Overheadlocation+(inode#/inodesperblock)
	Contiguous Allocation
		Pros
			Head won't have to move much
			Calculating block location is easy, only have to know block start and the offest
			
		Cons
			External fragmentation
				Solution
				Indexed Table
			May not be able to grow files
			
	Indexed Tables
		Each file gets a index table
		Part of the inode for the file
		
		Cons
			Size
			
		Example
			max file 1MB, block size 512 bytes
			(2 ^ 20) / (2 ^ 9) = 2 ^ 11
			
			(2 ^ 11) / (2 ^ 2) = (2 ^ 9) = 8KB table size
			
			max file 4GB
			(2 ^ 32) / (2 ^ 12) = (2 ^ 20)
			(2 ^ 20) / (2 ^ 2) = (2 ^ 18)?
			
		Solution
			Dynamic Allocation with static allocation for small files
	
	Dynamic Allocation
		each file gets a certain block of space
		if file grows past it gets 1 indirect
		if file grows past it gets 2 indirect
		
	Data region
		8 blocks for overhead
		56 blocks for user
		inode is typically 265 mb
		
		so
		we can support 56 files ( each file occupies a block)
		we can support 56 files with a max file size of 4KB
		we reserve blocks (3-7) for inodes on the files
		we store a bitmap vectore to identify with inodes are ope n
		
	Finding open bit
		read integers from bitmap vector
		first int greater than 1 means there is a open slot in that word
			find the first free block 