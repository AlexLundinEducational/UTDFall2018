Lecture

	Big Picture
		Virtualization
			CPU
				Context Switch - includes current process, register values
				Schedules - can have multi level with priority
					FIFO
					LIFO
					
			Memory
				Allocation - setting limits for program
				Segmentation - 
				Paging - contain commonly accessed values, loaded in memory
					TLB
					Multilevel
					Swapping - pull from disk
					
	Big Picture
		Virtualization 	- only used when resource has to be shared
						- creates isolation between entities sharing
						- hides the fact of sharing from entities
			CPU			- sharing starts with CPU
						- we created an abstraction of process for the CPU
				Context Switch
						- 
						- policy determines who goes next
				Schedules
						- determines which process gets the time slice
			
			Memory 		- created abstract space called virutal memory
				Allocation
						- mapping of virtual memory to real memory
				Segmentation
						- deal withs internal fragmentation
						- doesn't deal with external fragmentation
				Paging
						- solves external fragmentation
						- each page is a equal size
						- created a new thing to store, the page table
					TLB
						- cache for some of the page table entries
					Multilevel
						- pageing of the page table so the size of the cache is reduced
					Swapping
						- demand paging
						- allows memory to move pages out for the demanded pages
						
	Threads
		Concurency - processes that are running simultaneously and independently
			communicate with 
				pipes
				shared memory
				sockets
			Procs
				use things that already exist
			Cons
				cumbersome programming
				high communcation overheads
				expensive context switch
			Solution
				thread
		Threads	
			similar to procedures, but they have their own control
			create thread	
				assign subtask to thread
			same process that share same address threads
			example: global variables are shared by all processes in the thread
			
			pros
				every thread has it's own registers and stack (even multithread)
				** slide 10
				threads of same process share:
					PID
					address sace
					open file descritors
					current working directory
					user id and group
				threads have their own:
					thread ID
					registers PC and SP
					stack within the address space
			cons